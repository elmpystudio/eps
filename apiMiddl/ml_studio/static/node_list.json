{
    "groups": [
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-database",
            "name": "Data Sources",
            "nodes": [
                {
                    "desc": "Task Name: Read CSV<br>DESC: Read CSV (comma-separated) file into data frame<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- CSV path: path to csv file<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbspOutput1:a Data frame contains the csv file data",
                    "name": "Read CSV",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "CSV Path",
                            "name": "csv_path",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "ReadCSV",
                    "kind": "noInput"
                },
                {
                    "desc": "Task Name: Select Data<br>DESC: Select one of your previously uploaded datasets<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Dataset Name<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbspOutput1:a Data frame containing the data",
                    "name": "Select Dataset",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Dataset Name",
                            "lookup": [],
                            "name": "dataset_name",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "SelectDataset",
                    "kind": "noInput"
                },
                {
                    "desc": "Task Name: Select Kaggle<br>DESC: Select a Kaggle datasets<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Dataset Name<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbspOutput1:a Data frame containing the data",
                    "name": "Select Kaggle",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Dataset Name",
                            "lookup": [],
                            "name": "dataset_name",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "KaggleDataset",
                    "kind": "noInput"
                }
            ]
        },
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-wrench",
            "name": "Data Manipulation",
            "nodes": [
                {
                    "desc": "Task Name: Split Data<br>DESC: Split data into training set and testing set<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Partition Percentage: Percentage training and testing split<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame contains the first split<br>&nbsp&nbsp&nbsp&nbsp- Output2: a Data frame contains the second split",
                    "name": "Data Splitter",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Training Percentage, remaining will be for test",
                            "name": "partition_percentage",
                            "type": "float",
                            "value": ""
                        }
                    ],
                    "type": "SplitData",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Apply Sqlite<br>DESC: Returns a DataFrame corresponding to the result set of the query string.<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp-SQL query: string SQL query<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>&nbsp&nbsp&nbsp&nbsp- Input2: a Data frame (optional)<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with the applied SQL query",
                    "name": "Apply SQL",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "SQLite Query",
                            "name": "query",
                            "type": "text_area",
                            "value": ""
                        }
                    ],
                    "type": "ApplySqlite",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Categorical to Numeric",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "CategoryEncoding",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Change Column Name",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_name_dict",
                            "type": "columns_with_names",
                            "value": ""
                        }
                    ],
                    "type": "ChangeColumnsName",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Change Data Types<br>DESC: Change columns data type to selected type<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: name of columns with new data types to be changed<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with select columns data types changed",
                    "name": "Change Data Type",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Changed Column(s)",
                            "name": "changed_columns",
                            "type": "columns_with_types",
                            "value": ""
                        }
                    ],
                    "type": "ChangeDtypes",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Column Binning<br>DESC: Binning selected columns with desired number of bins<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: name of columns to be binned<br>&nbsp&nbsp&nbsp&nbsp- Number of bins: number of bins for the column<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with binned selected columns",
                    "name": "Column Binning",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name",
                            "name": "col_name",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Number of Bins",
                            "name": "no_bins",
                            "type": "integer",
                            "value": "5"
                        }
                    ],
                    "type": "ColumnBinning",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Drop Missing Records<br>DESC: Drop missing records from a row or column<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Drop Type: Drop row with missing, drop empty rows, drop empty columns<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with no missing records",
                    "name": "Drop Missing",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Drop Type",
                            "lookup": [
                                "DROP_ROW_WITH_MISSING",
                                "DROP_EMPTY_ROW",
                                "DROP_EMPTY_COLUMN"
                            ],
                            "name": "drop_type",
                            "type": "DropMissing",
                            "value": ""
                        }
                    ],
                    "type": "DropMissing",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Filling Missing with Mean<br>DESC: Filling missing records in a column with the mean of the column<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: Names of the columns where missing records will be filled<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame with missing records<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with missing records filled",
                    "name": "Fill Missing with Mean",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "FillMissingWithMean",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Filling Missing with Value<br>DESC: Filling missing records in a column with a value<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Value: value to be filled in missing records<br>&nbsp&nbsp&nbsp&nbsp- Column Names: Names of the columns where missing records will be filled<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame with missing records<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with missing records filled",
                    "name": "Fill Missing with Value",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        },
                        {
                            "display_name": "Replacement Value",
                            "name": "replacement_value",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "FillMissingWithValue",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Join Data<br>DESC: Merge Data frame objects by performing a database-style join operation.<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Left column name: Field names to join on in left data frame<br>&nbsp&nbsp&nbsp&nbsp- Right column name: Field names to join on in right data frame<br>&nbsp&nbsp&nbsp&nbsp- Join Type: Type of join to apply<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>&nbsp&nbsp&nbsp&nbsp- Input2: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with join applied",
                    "name": "Join Data",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Join Type",
                            "lookup": [
                                "inner",
                                "left",
                                "right",
                                "outer"
                            ],
                            "name": "join_type",
                            "type": "JoinDataTypes",
                            "value": "inner"
                        },
                        {
                            "display_name": "Left Columns",
                            "name": "left_col",
                            "type": "multiple_columns",
                            "value": ""
                        },
                        {
                            "display_name": "Right Columns",
                            "name": "right_col",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "JoinData",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Column Melting",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Identifier Variables",
                            "name": "id_vars",
                            "type": "string",
                            "value": ""
                        },
                        {
                            "display_name": "Value Variables",
                            "name": "value_vars",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "MeltingDf",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Replace Values<br>DESC: Replace values given in ‘value to replace’ with ‘replacement value’ in a column<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Value to Replace: value to replace in a column<br>&nbsp&nbsp&nbsp&nbsp- Replacement Value: value used in replacement<br>&nbsp&nbsp&nbsp&nbsp- Column Names: names of the columns where replacement will take place<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with replaced values",
                    "name": "Replace Value",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        },
                        {
                            "display_name": "Replacement Value",
                            "name": "replacement_value",
                            "type": "string",
                            "value": ""
                        },
                        {
                            "display_name": "Value to Replace",
                            "name": "value_to_replace",
                            "type": "string",
                            "value": ""
                        }
                    ],
                    "type": "ReplaceValue",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Row Filter<br>DESC: Apply filter to rows<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Filter Expression: method of row filter to apply.<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame contains filtered rows",
                    "name": "Row Filter",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Filter Expression",
                            "name": "filter_expression",
                            "type": "text_area",
                            "value": ""
                        }
                    ],
                    "type": "RowFilter",
                    "kind": "dataManipulation"
                },
                {
                    "desc": "Task Name: Select Columns<br>DESC: Subset columns of data frame<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: Name of columns to be selected<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame contains filtered rows",
                    "name": "Column Selector",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "SelectColumns",
                    "kind": "dataManipulation"
                }
            ]
        },
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-refresh",
            "name": "Data Transformation",
            "nodes": [
                {
                    "desc": "Task Name: Normalizer<br>DESC: Scale input vectors individually to unit norm<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be normalized<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with normalized columns",
                    "name": "Normalizer",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "Normalized",
                    "kind": "dataTransformation"
                },
                {
                    "desc": "Task Name: Task Standardize<br>DESC: Standardize features by removing the mean and scaling to unit variance<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with standardized columns",
                    "name": "Standardizer",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Column Name(s)",
                            "name": "col_names",
                            "type": "multiple_columns",
                            "value": ""
                        }
                    ],
                    "type": "Standardized",
                    "kind": "dataTransformation"
                }
            ]
        },
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-exchange",
            "name": "Data Sampling",
            "nodes": [
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Over Sampling",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Over Sampling Type",
                            "lookup": [
                                "RANDOM_OVER_SAMPLING",
                                "ADASYN",
                                "SMOTE_REGULAR",
                                "SMOTE_BORDERLINE1",
                                "SMOTE_BORDERLINE2",
                                "SMOTE_SVM"
                            ],
                            "name": "over_sampling_type",
                            "type": "OverSamplingTypes",
                            "value": ""
                        },
                        {
                            "display_name": "Random Seed",
                            "name": "random_seed",
                            "type": "integer",
                            "value": "0"
                        }
                    ],
                    "type": "OverSample",
                    "kind": "dataSampling"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Under Sampling",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Random Seed",
                            "name": "random_seed",
                            "type": "integer",
                            "value": "0"
                        },
                        {
                            "display_name": "Under Sampling Type",
                            "lookup": [
                                "TOMEK_LINKS",
                                "ONE_SIDED_SELECTION",
                                "RANDOM_UNDER_SAMPLING",
                                "NEIGHBOURHOOD_CLEANING_RULE",
                                "CONDENSED_NEAREST_NEIGHBOUR",
                                "NEARMISS_V1",
                                "NEARMISS_V2",
                                "NEARMISS_V3",
                                "CLUSTER_CENTROIDS_SOFT_VOTING",
                                "CLUSTER_CENTROIDS_HARD_VOTING",
                                "REPEATED_EDITED_NEAREST_NEIGHBOUR",
                                "ALL_KNN"
                            ],
                            "name": "under_sampling_type",
                            "type": "UnderSamplingTypes",
                            "value": ""
                        }
                    ],
                    "type": "UnderSample",
                    "kind": "dataSampling"
                }
            ]
        },
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-cogs",
            "name": "Machine Learning",
            "nodes": [
                {
                    "desc": "Task Name: Fit Model<br>DESC: Train initialized model with labeled data<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- label_column: labeled column which the model will train on<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame containing labeled data<br>&nbsp&nbsp&nbsp&nbsp- Input2: an Initialized model<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a fitted(trained) model",
                    "name": "Fit Model",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "model"
                        },
                        {
                            "is_output": false,
                            "type": "model"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        }
                    ],
                    "type": "FitModel",
                    "kind": "machineLearning"
                },
                {
                    "desc": "Task Name: Run Model<br>DESC: run fitted(trained) model to make predictions<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- label_column: unlabeled column to make prediction on<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data Frame with unlabeled data<br>&nbsp&nbsp&nbsp&nbsp- Input1: fitted model<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with predictions for the unlabeled data",
                    "name": "Run Model",
                    "ports": [
                        {
                            "is_output": true,
                            "type": "data"
                        },
                        {
                            "is_output": false,
                            "type": "model"
                        },
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        }
                    ],
                    "type": "RunModel",
                    "kind": "machineLearning"
                }
            ],
            "groups": [
                {
                    "name": "Top",
                    "iconName": "fa fa-cogs",
                    "nodes": [
                        {
                            "desc": "Task Name: Random Forest Classifier<br>DESC: Random Forest Classifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- n_estimators: The number of trees in the forest<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: Random Forest classifier model",
                            "name": "Random Forest Classifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Number of Estimators",
                                    "name": "n_estimators",
                                    "type": "string",
                                    "value": "10"
                                }
                            ],
                            "type": "RandomForestClassifier",
                            "kind": "noInput"
                        },
                        {
                            "desc": "Task Name: Linear Regression<br>DESC:Linear Regression Classifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Normalize_inputs: if true, input will be normalized<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: Linear Regression classifier model",
                            "name": "Linear Regression",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Normalize Inputs",
                                    "lookup": [
                                        "True",
                                        "False"
                                    ],
                                    "name": "normalize",
                                    "type": "boolean",
                                    "value": "True"
                                }
                            ],
                            "type": "LinearRegression",
                            "kind": "noInput"
                        },
                        {
                            "desc": "Task Name: Random Forest Regression<br>DESC: Regression using random forest<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- n_estimators: The number of trees in the forest<br>&nbsp&nbsp&nbsp&nbsp- criterion: The function to measure the quality of a split<br>&nbsp&nbsp&nbsp&nbsp- min_samples_split: The minimum number of samples required to split an internal node<br>&nbsp&nbsp&nbsp&nbsp- min_samples_leaf: The minimum number of samples required to be at a leaf node<br>&nbsp&nbsp&nbsp&nbsp- random_state: Seed for the random generator<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: Random Forest regression model",
                            "name": "Random Forest Regression",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Criterion",
                                    "lookup": [
                                        "mse",
                                        "mae"
                                    ],
                                    "name": "criterion",
                                    "type": "RandomForestRegressorCriterionTypes",
                                    "value": "mse"
                                },
                                {
                                    "display_name": "Minimum Samples in a Leaf",
                                    "name": "min_samples_leaf",
                                    "type": "integer",
                                    "value": "3"
                                },
                                {
                                    "display_name": "Minimum Samples to Split",
                                    "name": "min_samples_split",
                                    "type": "integer",
                                    "value": "6"
                                },
                                {
                                    "display_name": "Number of Estimators",
                                    "name": "n_estimators",
                                    "type": "string",
                                    "value": "10"
                                },
                                {
                                    "display_name": "Random Seed",
                                    "name": "random_state",
                                    "type": "integer",
                                    "value": "0"
                                }
                            ],
                            "type": "RandomForestRegressor",
                            "kind": "noInput"
                        },
                        {
                            "desc": "XGBRegressor<br>DESC: XGBRegressor<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- to be defined <br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: XGBRegressor model",
                            "name": "XGBRegressor",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Tree Method",
                                    "name": "tree_method",
                                    "type": "string",
                                    "value": "hist"
                                }
                            ],
                            "type": "XGBRegressor"
                        },
                        {
                            "desc": "XGBClassifier<br>DESC: XGBClassifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- to be defined <br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: XGBClassifier model",
                            "name": "XGBClassifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "booster",
                                    "name": "booster",
                                    "type": "string",
                                    "value": "gbtree"
                                }
                            ],
                            "type": "XGBClassifier"
                        },
                        {
                            "desc": "Task Name: K-Means Cluster<br>DESC: K-means clustering<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- n_clusters: The number of clusters to form as well as the number of centroids to generate<br>&nbsp&nbsp&nbsp&nbsp- init: Method for initialization<br>&nbsp&nbsp&nbsp&nbsp- n_init: Number of time the k-means algorithm will be run with different centroid seeds<br>&nbsp&nbsp&nbsp&nbsp- max_iter: Maximum number of iterations of the k-means algorithm for a single run<br>&nbsp&nbsp&nbsp&nbsp- tol: Relative tolerance with regards to inertia to declare convergence<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a K-means Cluster Model",
                            "name": "k-Means",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Initialization Method",
                                    "name": "init",
                                    "type": "string",
                                    "lookup": [
                                        "k-means++",
                                        "random",
                                        "an ndarray"
                                    ],
                                    "value": ""
                                },
                                {
                                    "display_name": "Max Number of Iterations",
                                    "name": "max_iter",
                                    "type": "string",
                                    "value": ""
                                },
                                {
                                    "display_name": "Number of Clusters",
                                    "name": "n_clusters",
                                    "type": "string",
                                    "value": ""
                                },
                                {
                                    "display_name": "Initialization Number",
                                    "name": "n_init",
                                    "type": "int",
                                    "value": "10"
                                },
                                {
                                    "display_name": "Tolerance",
                                    "name": "tol",
                                    "type": "string",
                                    "value": ""
                                }
                            ],
                            "type": "Kmeans",
                            "kind": "noInput"
                        }
                    ]
                },
                {
                    "name": "Classic",
                    "iconName": "fa fa-cogs",
                    "nodes": [
                        {
                            "desc": "Task Name: Decision Tree<br>DESC: Decision Tree Classifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- criterion: The function to measure the quality of a split<br>&nbsp&nbsp&nbsp&nbsp- min_samples_split: The minimum number of samples required to split an internal node<br>&nbsp&nbsp&nbsp&nbsp- min_samples_leaf: The minimum number of samples required to be at a leaf node<br>&nbsp&nbsp&nbsp&nbsp- max_depth: (optional) The maximum depth of the tree<br>&nbsp&nbsp&nbsp&nbsp- max_leaf_nodes: (optional) Grow a tree with max leaf nodes in best-first fashion. Best nodes are defined as relative reduction in impurity<br>&nbsp&nbsp&nbsp&nbsp- random_state: Seed for the random generator<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: Decision Tree classifier model",
                            "name": "Decision Tree Classifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Criterion",
                                    "lookup": [
                                        "gini",
                                        "entropy"
                                    ],
                                    "name": "criterion",
                                    "type": "DecisionTreeCriterionTypes",
                                    "value": "gini"
                                },
                                {
                                    "display_name": "Maximum Depth",
                                    "name": "max_depth",
                                    "type": "integer",
                                    "value": ""
                                },
                                {
                                    "display_name": "Max Leaf Nodes",
                                    "name": "max_leaf_nodes",
                                    "type": "integer",
                                    "value": ""
                                },
                                {
                                    "display_name": "Minimum Samples in a Leaf",
                                    "name": "min_samples_leaf",
                                    "type": "integer",
                                    "value": "3"
                                },
                                {
                                    "display_name": "Minimum Samples to Split",
                                    "name": "min_samples_split",
                                    "type": "integer",
                                    "value": "6"
                                },
                                {
                                    "display_name": "Random Seed",
                                    "name": "random_state",
                                    "type": "integer",
                                    "value": "0"
                                }
                            ],
                            "type": "DecisionTreeClassifier",
                            "kind": "noInput"
                        },
                        {
                            "desc": "Task Name: KNN<br>DESC: K Neighbors Classifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- n_neighbors: Number of neighbors to be used<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: K-Neighbors classifier model",
                            "name": "k-Nearest Neighbor Classifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Number of Neighbors",
                                    "name": "n_neighbors",
                                    "type": "string",
                                    "value": ""
                                }
                            ],
                            "type": "KNeighborsClassifier",
                            "kind": "noInput"
                        },
                        {
                            "desc": "Task Name: Logistic Regression Classifier<br>DESC:<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- fit_intercept:<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed<br>&nbsp&nbsp&nbsp&nbsp Important:<br>&nbsp&nbsp&nbsp&nbsp- For small datasets ‘liblinear’ is a good choice<br>&nbsp&nbsp&nbsp&nbsp ‘sag’ and ‘saga’ are faster for large ones.<br>&nbsp&nbsp&nbsp&nbspFor multiclass problems, only ‘newton-cg’, ‘sag’, ‘saga’ and ‘lbfgs’ handle multinomial loss.<br>&nbsp&nbsp&nbsp&nbsp‘liblinear’ is limited to one-versus-rest schemes.<br>&nbsp&nbsp&nbsp&nbsp‘newton-cg’, ‘lbfgs’, ‘sag’ and ‘saga’ handle L2 or no penalty<br>&nbsp&nbsp&nbsp&nbsp‘liblinear’ and ‘saga’ also handle L1 penalty<br>&nbsp&nbsp&nbsp&nbsp-ONLY ‘saga’  supports ‘elasticnet’ penalty<br>&nbsp&nbsp&nbsp&nbsp‘liblinear’ does not support setting penalty='none'",
                            "name": "Logistic Regression Classifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "C Value",
                                    "name": "C",
                                    "type": "float",
                                    "value": "1"
                                },
                                {
                                    "display_name": "Ratio (between 0 and 1)",
                                    "name": "ratio",
                                    "type": "float",
                                    "value": "None"
                                },
                                {
                                    "display_name": "Penalty",
                                    "lookup": [
                                        "l1",
                                        "l2",
                                        "elasticnet",
                                        "none"
                                    ],
                                    "name": "penalty",
                                    "type": "LogisticRegPenaltyTypes",
                                    "value": "l2"
                                },
                                {
                                    "display_name": "Fit Intercept",
                                    "lookup": [
                                        "True",
                                        "False"
                                    ],
                                    "name": "fit_intercept",
                                    "type": "boolean",
                                    "value": "True"
                                },
                                {
                                    "display_name": "Solver",
                                    "lookup": [
                                        "newton-cg",
                                        "lbfgs",
                                        "liblinear",
                                        "sag",
                                        "saga"
                                    ],
                                    "name": "solver",
                                    "type": "LRCSolverTypes",
                                    "value": "lbfgs"
                                }
                            ],
                            "type": "LogisticRegressionClassifier",
                            "kind": "noInput"
                        },
                        {
                            "desc": "Task Name: Neural Network Classifier<br>DESC: Multi-layer perceptron classifier<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- solver: solver for weight optimization<br>&nbsp&nbsp&nbsp&nbsp- hidden_layer_sizes: the number of neurons in the hidden layer<br>&nbsp&nbsp&nbsp&nbsp- random_state: the seed used by the random number generator<br>&nbsp&nbsp&nbsp&nbsp- activation: Activation function for the hidden layer<br>&nbsp&nbsp&nbsp&nbsp- alpha: L2 penalty parameter<br>&nbsp&nbsp&nbsp&nbsp- learning_rate: schedule for weight updates<br>&nbsp&nbsp&nbsp&nbsp- learning_rate_init: initial learning rate used<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: None<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Neural Network Model",
                            "name": "Multi-layer Perceptron Classifier",
                            "ports": [
                                {
                                    "is_output": true,
                                    "type": "model"
                                }
                            ],
                            "proprties": [
                                {
                                    "display_name": "Activation",
                                    "lookup": [
                                        "identity",
                                        "logistic",
                                        "relu",
                                        "tanh"
                                    ],
                                    "name": "activation",
                                    "type": "NNActivationTypes",
                                    "value": "relu"
                                },
                                {
                                    "display_name": "Alpha",
                                    "name": "alpha",
                                    "type": "float",
                                    "value": "0.1"
                                },
                                {
                                    "display_name": "Hidden Layer Size",
                                    "name": "hidden_layer_sizes",
                                    "type": "int",
                                    "value": "3"
                                },
                                {
                                    "display_name": "Learning Rate",
                                    "name": "learning_rate",
                                    "type": "str",
                                    "value": "constant"
                                },
                                {
                                    "display_name": "Learning",
                                    "name": "learning_rate_init",
                                    "type": "int",
                                    "value": "1"
                                },
                                {
                                    "display_name": "Max Number of Iterations",
                                    "name": "max_iter",
                                    "type": "int",
                                    "value": "3"
                                },
                                {
                                    "display_name": "Random Seed",
                                    "name": "random_state",
                                    "type": "int",
                                    "value": "0"
                                },
                                {
                                    "display_name": "Solver",
                                    "lookup": [
                                        "lbfgs",
                                        "sgd",
                                        "adam"
                                    ],
                                    "name": "solver",
                                    "type": "NNSolverTypes",
                                    "value": "adam"
                                }
                            ],
                            "type": "MultilayerPerceptronClassifier",
                            "kind": "noInput"
                        }
                    ]
                }
            ]
        },
        {
            "backgroundColor": "#ffffff",
            "iconColor": "#000000",
            "iconName": "fa fa-thumbs-up",
            "name": "Model Evaluation",
            "nodes": [
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Classification Evaluator",
                    "ports": [
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Predicted Column",
                            "name": "predict_column",
                            "type": "single_column",
                            "value": ""
                        }
                    ],
                    "type": "ClassificationMetrics",
                    "kind": "modelEvaluation"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Clustering Evaluator",
                    "ports": [
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Predicted Column",
                            "name": "predict_column",
                            "type": "single_column",
                            "value": ""
                        }
                    ],
                    "type": "ClusteringMetrics",
                    "kind": "modelEvaluation"
                },
                {
                    "desc": "Task Name: Change Columns Names<br>DESC:Renames selected columns<br>Task Parameters:<br>&nbsp&nbsp&nbsp&nbsp- Column Names: selected columns to be renames<br>&nbsp&nbsp&nbsp&nbsp- New names: new column names<br>Task Inputs:<br>&nbsp&nbsp&nbsp&nbsp- Input1: a Data frame<br>Task Outputs:<br>&nbsp&nbsp&nbsp&nbsp- Output1: a Data frame with columns renamed",
                    "name": "Regression Evaluator",
                    "ports": [
                        {
                            "is_output": false,
                            "type": "data"
                        }
                    ],
                    "proprties": [
                        {
                            "display_name": "Label Column",
                            "name": "label_column",
                            "type": "single_column",
                            "value": ""
                        },
                        {
                            "display_name": "Predicted Column",
                            "name": "predict_column",
                            "type": "single_column",
                            "value": ""
                        }
                    ],
                    "type": "RegressionMetrics",
                    "kind": "modelEvaluation"
                }
            ]
        }
    ]
}